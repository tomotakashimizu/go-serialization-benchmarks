package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Link) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "platform":
			z.Platform, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Platform")
				return
			}
		case "url":
			z.URL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Link) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "platform"
	err = en.Append(0x82, 0xa8, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.Platform)
	if err != nil {
		err = msgp.WrapError(err, "Platform")
		return
	}
	// write "url"
	err = en.Append(0xa3, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.URL)
	if err != nil {
		err = msgp.WrapError(err, "URL")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Link) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "platform"
	o = append(o, 0x82, 0xa8, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d)
	o = msgp.AppendString(o, z.Platform)
	// string "url"
	o = append(o, 0xa3, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.URL)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Link) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "platform":
			z.Platform, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Platform")
				return
			}
		case "url":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Link) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Platform) + 4 + msgp.StringPrefixSize + len(z.URL)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Preferences) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "theme":
			z.Theme, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Theme")
				return
			}
		case "language":
			z.Language, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "notifications":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Notifications")
				return
			}
			if z.Notifications == nil {
				z.Notifications = make(map[string]bool, zb0002)
			} else if len(z.Notifications) > 0 {
				for key := range z.Notifications {
					delete(z.Notifications, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 bool
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Notifications")
					return
				}
				za0002, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "Notifications", za0001)
					return
				}
				z.Notifications[za0001] = za0002
			}
		case "privacy":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Privacy")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Privacy")
					return
				}
				switch msgp.UnsafeString(field) {
				case "profile_public":
					z.Privacy.ProfilePublic, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "ProfilePublic")
						return
					}
				case "email_visible":
					z.Privacy.EmailVisible, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "EmailVisible")
						return
					}
				case "show_activity":
					z.Privacy.ShowActivity, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "ShowActivity")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Privacy")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Preferences) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "theme"
	err = en.Append(0x84, 0xa5, 0x74, 0x68, 0x65, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Theme)
	if err != nil {
		err = msgp.WrapError(err, "Theme")
		return
	}
	// write "language"
	err = en.Append(0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Language)
	if err != nil {
		err = msgp.WrapError(err, "Language")
		return
	}
	// write "notifications"
	err = en.Append(0xad, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Notifications)))
	if err != nil {
		err = msgp.WrapError(err, "Notifications")
		return
	}
	for za0001, za0002 := range z.Notifications {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Notifications")
			return
		}
		err = en.WriteBool(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Notifications", za0001)
			return
		}
	}
	// write "privacy"
	err = en.Append(0xa7, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79)
	if err != nil {
		return
	}
	// map header, size 3
	// write "profile_public"
	err = en.Append(0x83, 0xae, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Privacy.ProfilePublic)
	if err != nil {
		err = msgp.WrapError(err, "Privacy", "ProfilePublic")
		return
	}
	// write "email_visible"
	err = en.Append(0xad, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Privacy.EmailVisible)
	if err != nil {
		err = msgp.WrapError(err, "Privacy", "EmailVisible")
		return
	}
	// write "show_activity"
	err = en.Append(0xad, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Privacy.ShowActivity)
	if err != nil {
		err = msgp.WrapError(err, "Privacy", "ShowActivity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Preferences) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "theme"
	o = append(o, 0x84, 0xa5, 0x74, 0x68, 0x65, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Theme)
	// string "language"
	o = append(o, 0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Language)
	// string "notifications"
	o = append(o, 0xad, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Notifications)))
	for za0001, za0002 := range z.Notifications {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBool(o, za0002)
	}
	// string "privacy"
	o = append(o, 0xa7, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79)
	// map header, size 3
	// string "profile_public"
	o = append(o, 0x83, 0xae, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63)
	o = msgp.AppendBool(o, z.Privacy.ProfilePublic)
	// string "email_visible"
	o = append(o, 0xad, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.Privacy.EmailVisible)
	// string "show_activity"
	o = append(o, 0xad, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79)
	o = msgp.AppendBool(o, z.Privacy.ShowActivity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Preferences) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "theme":
			z.Theme, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Theme")
				return
			}
		case "language":
			z.Language, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "notifications":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Notifications")
				return
			}
			if z.Notifications == nil {
				z.Notifications = make(map[string]bool, zb0002)
			} else if len(z.Notifications) > 0 {
				for key := range z.Notifications {
					delete(z.Notifications, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 bool
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Notifications")
					return
				}
				za0002, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Notifications", za0001)
					return
				}
				z.Notifications[za0001] = za0002
			}
		case "privacy":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Privacy")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Privacy")
					return
				}
				switch msgp.UnsafeString(field) {
				case "profile_public":
					z.Privacy.ProfilePublic, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "ProfilePublic")
						return
					}
				case "email_visible":
					z.Privacy.EmailVisible, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "EmailVisible")
						return
					}
				case "show_activity":
					z.Privacy.ShowActivity, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Privacy", "ShowActivity")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Privacy")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Preferences) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Theme) + 9 + msgp.StringPrefixSize + len(z.Language) + 14 + msgp.MapHeaderSize
	if z.Notifications != nil {
		for za0001, za0002 := range z.Notifications {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BoolSize
		}
	}
	s += 8 + 1 + 15 + msgp.BoolSize + 14 + msgp.BoolSize + 14 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PrivacySettings) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "profile_public":
			z.ProfilePublic, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ProfilePublic")
				return
			}
		case "email_visible":
			z.EmailVisible, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "EmailVisible")
				return
			}
		case "show_activity":
			z.ShowActivity, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ShowActivity")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PrivacySettings) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "profile_public"
	err = en.Append(0x83, 0xae, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ProfilePublic)
	if err != nil {
		err = msgp.WrapError(err, "ProfilePublic")
		return
	}
	// write "email_visible"
	err = en.Append(0xad, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.EmailVisible)
	if err != nil {
		err = msgp.WrapError(err, "EmailVisible")
		return
	}
	// write "show_activity"
	err = en.Append(0xad, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ShowActivity)
	if err != nil {
		err = msgp.WrapError(err, "ShowActivity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PrivacySettings) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "profile_public"
	o = append(o, 0x83, 0xae, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63)
	o = msgp.AppendBool(o, z.ProfilePublic)
	// string "email_visible"
	o = append(o, 0xad, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.EmailVisible)
	// string "show_activity"
	o = append(o, 0xad, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79)
	o = msgp.AppendBool(o, z.ShowActivity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PrivacySettings) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "profile_public":
			z.ProfilePublic, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProfilePublic")
				return
			}
		case "email_visible":
			z.EmailVisible, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EmailVisible")
				return
			}
		case "show_activity":
			z.ShowActivity, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShowActivity")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PrivacySettings) Msgsize() (s int) {
	s = 1 + 15 + msgp.BoolSize + 14 + msgp.BoolSize + 14 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Profile) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "first_name":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "last_name":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "bio":
			z.Bio, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bio")
				return
			}
		case "avatar":
			z.Avatar, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Avatar")
				return
			}
		case "social_links":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "SocialLinks")
				return
			}
			if cap(z.SocialLinks) >= int(zb0002) {
				z.SocialLinks = (z.SocialLinks)[:zb0002]
			} else {
				z.SocialLinks = make([]Link, zb0002)
			}
			for za0001 := range z.SocialLinks {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "SocialLinks", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "SocialLinks", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "platform":
						z.SocialLinks[za0001].Platform, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001, "Platform")
							return
						}
					case "url":
						z.SocialLinks[za0001].URL, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001, "URL")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001)
							return
						}
					}
				}
			}
		case "preferences":
			err = z.Preferences.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Preferences")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Profile) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "first_name"
	err = en.Append(0x86, 0xaa, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "last_name"
	err = en.Append(0xa9, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "bio"
	err = en.Append(0xa3, 0x62, 0x69, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bio)
	if err != nil {
		err = msgp.WrapError(err, "Bio")
		return
	}
	// write "avatar"
	err = en.Append(0xa6, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Avatar)
	if err != nil {
		err = msgp.WrapError(err, "Avatar")
		return
	}
	// write "social_links"
	err = en.Append(0xac, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.SocialLinks)))
	if err != nil {
		err = msgp.WrapError(err, "SocialLinks")
		return
	}
	for za0001 := range z.SocialLinks {
		// map header, size 2
		// write "platform"
		err = en.Append(0x82, 0xa8, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteString(z.SocialLinks[za0001].Platform)
		if err != nil {
			err = msgp.WrapError(err, "SocialLinks", za0001, "Platform")
			return
		}
		// write "url"
		err = en.Append(0xa3, 0x75, 0x72, 0x6c)
		if err != nil {
			return
		}
		err = en.WriteString(z.SocialLinks[za0001].URL)
		if err != nil {
			err = msgp.WrapError(err, "SocialLinks", za0001, "URL")
			return
		}
	}
	// write "preferences"
	err = en.Append(0xab, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73)
	if err != nil {
		return
	}
	err = z.Preferences.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Preferences")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Profile) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "first_name"
	o = append(o, 0x86, 0xaa, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "last_name"
	o = append(o, 0xa9, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "bio"
	o = append(o, 0xa3, 0x62, 0x69, 0x6f)
	o = msgp.AppendString(o, z.Bio)
	// string "avatar"
	o = append(o, 0xa6, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72)
	o = msgp.AppendString(o, z.Avatar)
	// string "social_links"
	o = append(o, 0xac, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SocialLinks)))
	for za0001 := range z.SocialLinks {
		// map header, size 2
		// string "platform"
		o = append(o, 0x82, 0xa8, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d)
		o = msgp.AppendString(o, z.SocialLinks[za0001].Platform)
		// string "url"
		o = append(o, 0xa3, 0x75, 0x72, 0x6c)
		o = msgp.AppendString(o, z.SocialLinks[za0001].URL)
	}
	// string "preferences"
	o = append(o, 0xab, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73)
	o, err = z.Preferences.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Preferences")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Profile) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "first_name":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "last_name":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "bio":
			z.Bio, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bio")
				return
			}
		case "avatar":
			z.Avatar, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Avatar")
				return
			}
		case "social_links":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SocialLinks")
				return
			}
			if cap(z.SocialLinks) >= int(zb0002) {
				z.SocialLinks = (z.SocialLinks)[:zb0002]
			} else {
				z.SocialLinks = make([]Link, zb0002)
			}
			for za0001 := range z.SocialLinks {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SocialLinks", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "SocialLinks", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "platform":
						z.SocialLinks[za0001].Platform, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001, "Platform")
							return
						}
					case "url":
						z.SocialLinks[za0001].URL, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001, "URL")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "SocialLinks", za0001)
							return
						}
					}
				}
			}
		case "preferences":
			bts, err = z.Preferences.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Preferences")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Profile) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.FirstName) + 10 + msgp.StringPrefixSize + len(z.LastName) + 4 + msgp.StringPrefixSize + len(z.Bio) + 7 + msgp.StringPrefixSize + len(z.Avatar) + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.SocialLinks {
		s += 1 + 9 + msgp.StringPrefixSize + len(z.SocialLinks[za0001].Platform) + 4 + msgp.StringPrefixSize + len(z.SocialLinks[za0001].URL)
	}
	s += 12 + z.Preferences.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Settings) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "language":
			z.Language, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "timezone":
			z.TimeZone, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TimeZone")
				return
			}
		case "features":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Features")
				return
			}
			if cap(z.Features) >= int(zb0002) {
				z.Features = (z.Features)[:zb0002]
			} else {
				z.Features = make([]string, zb0002)
			}
			for za0001 := range z.Features {
				z.Features[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Features", za0001)
					return
				}
			}
		case "limits":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Limits")
				return
			}
			if z.Limits == nil {
				z.Limits = make(map[string]int, zb0003)
			} else if len(z.Limits) > 0 {
				for key := range z.Limits {
					delete(z.Limits, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 int
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Limits")
					return
				}
				za0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Limits", za0002)
					return
				}
				z.Limits[za0002] = za0003
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Settings) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "language"
	err = en.Append(0x84, 0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Language)
	if err != nil {
		err = msgp.WrapError(err, "Language")
		return
	}
	// write "timezone"
	err = en.Append(0xa8, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TimeZone)
	if err != nil {
		err = msgp.WrapError(err, "TimeZone")
		return
	}
	// write "features"
	err = en.Append(0xa8, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Features)))
	if err != nil {
		err = msgp.WrapError(err, "Features")
		return
	}
	for za0001 := range z.Features {
		err = en.WriteString(z.Features[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Features", za0001)
			return
		}
	}
	// write "limits"
	err = en.Append(0xa6, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Limits)))
	if err != nil {
		err = msgp.WrapError(err, "Limits")
		return
	}
	for za0002, za0003 := range z.Limits {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Limits")
			return
		}
		err = en.WriteInt(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Limits", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Settings) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "language"
	o = append(o, 0x84, 0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Language)
	// string "timezone"
	o = append(o, 0xa8, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendString(o, z.TimeZone)
	// string "features"
	o = append(o, 0xa8, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Features)))
	for za0001 := range z.Features {
		o = msgp.AppendString(o, z.Features[za0001])
	}
	// string "limits"
	o = append(o, 0xa6, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Limits)))
	for za0002, za0003 := range z.Limits {
		o = msgp.AppendString(o, za0002)
		o = msgp.AppendInt(o, za0003)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Settings) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "language":
			z.Language, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "timezone":
			z.TimeZone, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeZone")
				return
			}
		case "features":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Features")
				return
			}
			if cap(z.Features) >= int(zb0002) {
				z.Features = (z.Features)[:zb0002]
			} else {
				z.Features = make([]string, zb0002)
			}
			for za0001 := range z.Features {
				z.Features[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Features", za0001)
					return
				}
			}
		case "limits":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limits")
				return
			}
			if z.Limits == nil {
				z.Limits = make(map[string]int, zb0003)
			} else if len(z.Limits) > 0 {
				for key := range z.Limits {
					delete(z.Limits, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 int
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Limits")
					return
				}
				za0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Limits", za0002)
					return
				}
				z.Limits[za0002] = za0003
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Settings) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Language) + 9 + msgp.StringPrefixSize + len(z.TimeZone) + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Features {
		s += msgp.StringPrefixSize + len(z.Features[za0001])
	}
	s += 7 + msgp.MapHeaderSize
	if z.Limits != nil {
		for za0002, za0003 := range z.Limits {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.IntSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *User) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "is_active":
			z.IsActive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsActive")
				return
			}
		case "profile":
			err = z.Profile.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Profile")
				return
			}
		case "settings":
			err = z.Settings.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Settings")
				return
			}
		case "tags":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0002) {
				z.Tags = (z.Tags)[:zb0002]
			} else {
				z.Tags = make([]string, zb0002)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "metadata":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(map[string]interface{}, zb0003)
			} else if len(z.Metadata) > 0 {
				for key := range z.Metadata {
					delete(z.Metadata, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 interface{}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0003, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
				z.Metadata[za0002] = za0003
			}
		case "created_at":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *User) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "id"
	err = en.Append(0x8a, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "email"
	err = en.Append(0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "is_active"
	err = en.Append(0xa9, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsActive)
	if err != nil {
		err = msgp.WrapError(err, "IsActive")
		return
	}
	// write "profile"
	err = en.Append(0xa7, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Profile.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Profile")
		return
	}
	// write "settings"
	err = en.Append(0xa8, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73)
	if err != nil {
		return
	}
	err = z.Settings.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Settings")
		return
	}
	// write "tags"
	err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001 := range z.Tags {
		err = en.WriteString(z.Tags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "metadata"
	err = en.Append(0xa8, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Metadata)))
	if err != nil {
		err = msgp.WrapError(err, "Metadata")
		return
	}
	for za0002, za0003 := range z.Metadata {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Metadata")
			return
		}
		err = en.WriteIntf(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Metadata", za0002)
			return
		}
	}
	// write "created_at"
	err = en.Append(0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *User) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "id"
	o = append(o, 0x8a, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.ID)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "email"
	o = append(o, 0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	// string "is_active"
	o = append(o, 0xa9, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.IsActive)
	// string "profile"
	o = append(o, 0xa7, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65)
	o, err = z.Profile.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Profile")
		return
	}
	// string "settings"
	o = append(o, 0xa8, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73)
	o, err = z.Settings.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Settings")
		return
	}
	// string "tags"
	o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tags)))
	for za0001 := range z.Tags {
		o = msgp.AppendString(o, z.Tags[za0001])
	}
	// string "metadata"
	o = append(o, 0xa8, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Metadata)))
	for za0002, za0003 := range z.Metadata {
		o = msgp.AppendString(o, za0002)
		o, err = msgp.AppendIntf(o, za0003)
		if err != nil {
			err = msgp.WrapError(err, "Metadata", za0002)
			return
		}
	}
	// string "created_at"
	o = append(o, 0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74)
	o = msgp.AppendTime(o, z.CreatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *User) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "is_active":
			z.IsActive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsActive")
				return
			}
		case "profile":
			bts, err = z.Profile.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Profile")
				return
			}
		case "settings":
			bts, err = z.Settings.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Settings")
				return
			}
		case "tags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0002) {
				z.Tags = (z.Tags)[:zb0002]
			} else {
				z.Tags = make([]string, zb0002)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "metadata":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(map[string]interface{}, zb0003)
			} else if len(z.Metadata) > 0 {
				for key := range z.Metadata {
					delete(z.Metadata, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 interface{}
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0003, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0002)
					return
				}
				z.Metadata[za0002] = za0003
			}
		case "created_at":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *User) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.Email) + 4 + msgp.IntSize + 10 + msgp.BoolSize + 8 + z.Profile.Msgsize() + 9 + z.Settings.Msgsize() + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Tags {
		s += msgp.StringPrefixSize + len(z.Tags[za0001])
	}
	s += 9 + msgp.MapHeaderSize
	if z.Metadata != nil {
		for za0002, za0003 := range z.Metadata {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.GuessSize(za0003)
		}
	}
	s += 11 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Users) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Users, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Users) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Users) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Users) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Users, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Users) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}
