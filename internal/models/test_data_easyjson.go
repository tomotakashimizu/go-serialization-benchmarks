// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Users, 0, 0)
			} else {
				*out = Users{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 User
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(out *jwriter.Writer, in Users) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		case "settings":
			(out.Settings).UnmarshalEasyJSON(in)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Tags = append(out.Tags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Metadata)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix)
		(in.Settings).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Tags {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Metadata {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels1(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "language":
			out.Language = string(in.String())
		case "timezone":
			out.TimeZone = string(in.String())
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Features = append(out.Features, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Limits = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 int
					v10 = int(in.Int())
					(out.Limits)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix[1:])
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Features {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limits\":"
		out.RawString(prefix)
		if in.Limits == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Limits {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				out.Int(int(v13Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels2(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "social_links":
			if in.IsNull() {
				in.Skip()
				out.SocialLinks = nil
			} else {
				in.Delim('[')
				if out.SocialLinks == nil {
					if !in.IsDelim(']') {
						out.SocialLinks = make([]Link, 0, 2)
					} else {
						out.SocialLinks = []Link{}
					}
				} else {
					out.SocialLinks = (out.SocialLinks)[:0]
				}
				for !in.IsDelim(']') {
					var v14 Link
					(v14).UnmarshalEasyJSON(in)
					out.SocialLinks = append(out.SocialLinks, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferences":
			(out.Preferences).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"social_links\":"
		out.RawString(prefix)
		if in.SocialLinks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.SocialLinks {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"preferences\":"
		out.RawString(prefix)
		(in.Preferences).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels3(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(in *jlexer.Lexer, out *PrivacySettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profile_public":
			out.ProfilePublic = bool(in.Bool())
		case "email_visible":
			out.EmailVisible = bool(in.Bool())
		case "show_activity":
			out.ShowActivity = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(out *jwriter.Writer, in PrivacySettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profile_public\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ProfilePublic))
	}
	{
		const prefix string = ",\"email_visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmailVisible))
	}
	{
		const prefix string = ",\"show_activity\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowActivity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrivacySettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrivacySettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrivacySettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrivacySettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels4(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(in *jlexer.Lexer, out *Preferences) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "theme":
			out.Theme = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "notifications":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Notifications = make(map[string]bool)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 bool
					v17 = bool(in.Bool())
					(out.Notifications)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "privacy":
			(out.Privacy).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(out *jwriter.Writer, in Preferences) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		if in.Notifications == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Notifications {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.Bool(bool(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"privacy\":"
		out.RawString(prefix)
		(in.Privacy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Preferences) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Preferences) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Preferences) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Preferences) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels5(l, v)
}
func easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "platform":
			out.Platform = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"platform\":"
		out.RawString(prefix[1:])
		out.String(string(in.Platform))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2b5cafd5EncodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2b5cafd5DecodeGithubComTomotakashimizuGoSerializationBenchmarksInternalModels6(l, v)
}
