// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetadataEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsMetadataEntry(buf []byte, offset flatbuffers.UOffsetT) *MetadataEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetadataEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishMetadataEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMetadataEntry(buf []byte, offset flatbuffers.UOffsetT) *MetadataEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MetadataEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMetadataEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MetadataEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetadataEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetadataEntry) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MetadataEntry) StringValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MetadataEntry) IntValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetadataEntry) MutateIntValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *MetadataEntry) BoolValue() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MetadataEntry) MutateBoolValue(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *MetadataEntry) FloatValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MetadataEntry) MutateFloatValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *MetadataEntry) ValueType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetadataEntry) MutateValueType(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func MetadataEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MetadataEntryAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func MetadataEntryAddStringValue(builder *flatbuffers.Builder, stringValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(stringValue), 0)
}
func MetadataEntryAddIntValue(builder *flatbuffers.Builder, intValue int32) {
	builder.PrependInt32Slot(2, intValue, 0)
}
func MetadataEntryAddBoolValue(builder *flatbuffers.Builder, boolValue bool) {
	builder.PrependBoolSlot(3, boolValue, false)
}
func MetadataEntryAddFloatValue(builder *flatbuffers.Builder, floatValue float64) {
	builder.PrependFloat64Slot(4, floatValue, 0.0)
}
func MetadataEntryAddValueType(builder *flatbuffers.Builder, valueType byte) {
	builder.PrependByteSlot(5, valueType, 0)
}
func MetadataEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
